# Generated by Django 2.0.2 on 2018-04-16 05:56

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accident_Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='AccidentReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accident_date', models.DateField(verbose_name='Дата аварии')),
                ('accident_time', models.TimeField(verbose_name='Время аварии')),
                ('number_accident', models.CharField(max_length=40, verbose_name='Номер протокола аварии')),
                ('accident_paper_date', models.DateField(verbose_name='Дата составления протокола')),
                ('accident_paper_time', models.TimeField(verbose_name='Время составления протокола')),
                ('accident_address', models.CharField(max_length=200, verbose_name='Адрес аварии')),
                ('accident_severity', models.CharField(blank=True, choices=[('легкая', 'легкая'), ('средней тяжести', 'средней тяжести'), ('тяжкий вред', 'тяжкий вред'), ('без вреда здоровью', 'без вреда здоровью'), ('не указано', 'не указано')], default='не указано', max_length=50, null=True, verbose_name='Тяжесть аварии')),
                ('accident_number_of_people', models.IntegerField(verbose_name='Количество людей в аварии')),
                ('accident_death', models.IntegerField(default=0, verbose_name='Смертельный исход, взрослые (количество)')),
                ('accident_children', models.IntegerField(default=0, verbose_name='Из участвовавших в аварии-дети')),
                ('accident_children_death', models.IntegerField(default=0, verbose_name='Смертельный исход, дети(количество)')),
                ('accident_cause', models.CharField(max_length=250, verbose_name='Причина аварии')),
                ('accident_photo_1', models.ImageField(blank=True, default='accident_photo/default.jpg', null=True, upload_to='accident_photo/', verbose_name='Первое фото аварии')),
                ('accident_photo_2', models.ImageField(blank=True, default='accident_photo/default.jpg', null=True, upload_to='accident_photo/', verbose_name='Второе фото аварии')),
                ('accident_comment', models.TextField(verbose_name='Комментарий к аварии')),
            ],
        ),
        migrations.CreateModel(
            name='AutoSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(max_length=100, verbose_name='Название автошколы')),
                ('school_photo', models.ImageField(blank=True, default='autoschool_photo/default.jpg', null=True, upload_to='autoschool_photo/', verbose_name='Фото автошколы')),
                ('school_address', models.CharField(max_length=100, verbose_name='Адрес автошколы')),
                ('school_phone', models.CharField(max_length=100, verbose_name='Телефон автошколы')),
                ('school_category_dr_license', models.CharField(max_length=40, verbose_name='Обучение на категорию')),
            ],
        ),
        migrations.CreateModel(
            name='Autoschool_Driver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_categ', models.TextField(choices=[('A', 'A'), ('A1', 'A1'), ('B', 'B'), ('B1', 'B1'), ('C', 'C'), ('C1', 'C1'), ('D', 'D'), ('D1', 'D1'), ('BE', 'BE'), ('CE', 'CE'), ('C1E', 'C1E'), ('DE', 'DE'), ('D1E', 'D1E'), ('M', 'M'), ('Tm', 'Tm'), ('Tb', 'Tb')], verbose_name='Обучение на категорию')),
                ('school_date_from', models.DateField(verbose_name='Дата начала обучения')),
                ('school_date_to', models.DateField(verbose_name='Дата окончания обучения')),
                ('school_exam_mark', models.TextField(choices=[('Экзамен : 5', 'Экзамен : 5'), ('Экзамен : 4', 'Экзамен : 4'), ('Экзамен : 3', 'Экзамен : 3')], verbose_name='Результат экзамена')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.AutoSchool', verbose_name='Автошкола')),
            ],
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camera_number', models.CharField(max_length=30, verbose_name='Номер камеры')),
                ('camera_name', models.CharField(choices=[('Радар Стрелка СТ/М', 'Радар Стрелка СТ/М'), ('Система Автодория', 'Система Автодория'), ('Фоторадарные комплексы КРИС С', 'Фоторадарные комплексы КРИС С'), ('Фоторадарные комплексы КРИС П', 'Фоторадарные комплексы КРИС П'), ('Радар Кречет-С', 'Радар Кречет-С'), ('Радар Перекресток', 'Радар Перекресток'), ('Комплекс фотовидеофиксации "Сова"', 'Комплекс фотовидеофиксации "Сова"'), ('Комплекс фотовидеофиксации "Одиссей"', 'Комплекс фотовидеофиксации "Одиссей"'), ('Паркон', 'Паркон')], max_length=100, verbose_name='Название камеры')),
                ('camera_vertification_from', models.DateField(blank=True, null=True, verbose_name='Дата поверки камеры')),
                ('camera_vertification_to', models.DateField(verbose_name='Дата действия поверки камеры до')),
                ('camera_functions', models.CharField(choices=[('Превышение скорости', 'Превышение скорости'), ('Проезд на запрещающий сигнал светофора', 'Проезд на запрещающий сигнал светофора'), ('Выезд за стоп-линию', 'Выезд за стоп-линию'), ('Выезд на перекресток при заторе', 'Выезд на перекресток при заторе'), ('Выезд на встречную полосу движения', 'Выезд на встречную полосу движения'), ('Проезд под знак "Въезд запрещён', 'Проезд под знак "Въезд запрещён'), ('Проезд под знак "Движение грузовых автомобилей запрещено', 'Проезд под знак "Движение грузовых автомобилей запрещено'), ('Выезд на полосу для маршрутных транспортных средств', 'Выезд на полосу для маршрутных транспортных средств'), ('Выезд на тротуар', 'Выезд на тротуар'), ('Движение грузовиков далее второй полосы на автомагистралях и дорогах для автомобилей(МКАД)', 'Движение грузовиков далее второй полосы на автомагистралях и дорогах для автомобилей(МКАД)'), ('Нарушение требований дорожной разметки', 'Нарушение требований дорожной разметки'), ('Выполнение поворота из второго ряда', 'Выполнение поворота из второго ряда'), ('Не включенный ближний свет фар или дневные ходовые огни', 'Не включенный ближний свет фар или дневные ходовые огни'), ('Нарушение правил оплаты проезда для тяжелых грузовиков', 'Нарушение правил оплаты проезда для тяжелых грузовиков'), ('Непредоставление преимущества пешеходам на пешеходных переходах', 'Непредоставление преимущества пешеходам на пешеходных переходах'), ('Нарушение правил парковки', 'Нарушение правил парковки')], max_length=100, verbose_name='Функции камеры')),
                ('camera_address', models.CharField(max_length=200, verbose_name='Расположение камеры(адрес)')),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_status', models.CharField(choices=[('Стоит на учете', 'Стоит на учете'), ('Снят на учете', 'Снят на учете'), ('Числится в угоне', 'Числится в угоне')], default='Стоит на учете', max_length=20, verbose_name='Статус автомобиля')),
                ('car_photo', models.ImageField(default='car_photo/default_car.jpg', upload_to='car_photo/', verbose_name='Фото автомобиля')),
                ('car_model', models.CharField(max_length=100, verbose_name='Модель автомобиля')),
                ('car_colour', models.CharField(max_length=50, verbose_name='Цвет автомобиля')),
                ('car_number', models.CharField(max_length=6, verbose_name='Номер автомобиля')),
                ('car_region', models.CharField(max_length=3, verbose_name='Регион автомобиля')),
            ],
        ),
        migrations.CreateModel(
            name='CarHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_FIO', models.CharField(max_length=100, verbose_name='ФИО владельца')),
                ('history_birth', models.DateField(verbose_name='Дата рождения владельца')),
                ('history_passport', models.CharField(help_text='4444№123456', max_length=11, verbose_name='Номер паспорта владельца')),
                ('history_country', models.CharField(max_length=50, verbose_name='Страна')),
                ('history_town', models.CharField(max_length=50, verbose_name='Город')),
                ('history_car_run_start', models.FloatField(blank=True, null=True, verbose_name='Пробег автомобиля в км')),
                ('history_car_run_end', models.FloatField(blank=True, null=True, verbose_name='Пробег автомобиля в тыс. км')),
                ('history_date_from', models.DateField(verbose_name='Дата владения от')),
                ('history_date_to', models.DateField(verbose_name='Дата владения до')),
                ('history_document_buy', models.CharField(max_length=250, verbose_name='Документ, подтверждающий приобретение')),
                ('history_document_selling', models.CharField(max_length=250, verbose_name='Документ, подтверждающий продажу')),
                ('history_price_buy', models.BigIntegerField(verbose_name='Сумма покупки')),
                ('history_price_selling', models.BigIntegerField(verbose_name='Сумма продажи')),
                ('history_comments', models.TextField(verbose_name='Особые отметки')),
                ('car_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Автомобиль')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(choices=[('A', 'A'), ('A1', 'A1'), ('B', 'B'), ('B1', 'B1'), ('C', 'C'), ('C1', 'C1'), ('D', 'D'), ('D1', 'D1'), ('BE', 'BE'), ('CE', 'CE'), ('C1E', 'C1E'), ('DE', 'DE'), ('D1E', 'D1E'), ('M', 'M'), ('Tm', 'Tm'), ('Tb', 'Tb')], max_length=5, verbose_name='Название категории')),
                ('date_open_category', models.DateField(verbose_name='Дата открытия категории')),
            ],
        ),
        migrations.CreateModel(
            name='Decree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decree_number', models.CharField(max_length=25, verbose_name='Номер постановления')),
                ('decree_date', models.DateField(verbose_name='Дата постановления')),
                ('decree_violation', models.CharField(choices=[('Превышение скорости', 'Превышение скорости'), ('Проезд на запрещающий сигнал светофора или жест регулировщика', 'Проезд на запрещающий сигнал светофора или жест регулировщика'), ('Выезд на встречную полосу', 'Выезд на встречную полосу'), ('Несоблюдение правил остановки, стоянки, парковки', 'Несоблюдение правил остановки, стоянки, парковки'), ('Непредоставление преимущества в движении пешеходам', 'Непредоставление преимущества в движении пешеходам '), ('Езда в состоянии алкогольного или наркотического опьянения', 'Езда в состоянии алкогольного или наркотического опьянения'), ('Управление незарегистрированным автомобилем', 'Управление незарегистрированным автомобилем'), ('Управление ТС с нарушением правил установки на нем государственных регистрационных знаков', 'Управление ТС с нарушением правил установки на нем государственных регистрационных знаков '), ('Управление ТС без документов', 'Управление ТС без документов'), ('Управление ТС без прав', 'Управление ТС без прав'), ('Несоблюдение правил об обязательном страховании гражданской ответственности владельцев ТС', 'Несоблюдение правил об обязательном страховании гражданской ответственности владельцев ТС'), ('Нарушение требований в области технического осмотра ТС', 'Нарушение требований в области технического осмотра ТС'), ('Нарушение правил регистрации', 'Нарушение правил регистрации'), ('Превышение уровня шума или токсичности ТС', 'Превышение уровня шума или токсичности ТС'), ('Нарушение правил пользования фарами,поворотниками и гудком', 'Нарушение правил пользования фарами,поворотниками и гудком'), ('Выпуск на линию ТС с неисправностями, со спесигналами или спецраскраской без соответствующего на то разрешения', 'Выпуск на линию ТС с неисправностями, со спесигналами или спецраскраской без соответствующего на то разрешения'), ('Нарушение правил применения ремней безопасности или мотошлемов', 'Нарушение правил применения ремней безопасности или мотошлемов'), ('Перевозка грузов и буксировка', 'Перевозка грузов и буксировка'), ('Учебная езда', 'Учебная езда'), ('Причинение вреда здоровью', 'Причинение вреда здоровью'), ('Невыполнение обязанностей в связи с ДТП', 'Невыполнение обязанностей в связи с ДТП'), ('Несоблюдение обеспечения безопасности при ремонте, реконструкции, содержании дорог и ж/д переездов', 'Несоблюдение обеспечения безопасности при ремонте, реконструкции, содержании дорог и ж/д переездов'), ('Пользование телефоном за рулём', 'Пользование телефоном за рулём'), ('Нарушение правил движения по автомагистрали', 'Нарушение правил движения по автомагистрали'), ('Нарушение правил проезда перекрестков', 'Нарушение правил проезда перекрестков'), ('Нарушение правил маневрирования', 'Нарушение правил маневрирования'), ('Нарушение правил расположения ТС на проезжей части, встречного разъезда или обгона', 'Нарушение правил расположения ТС на проезжей части, встречного разъезда или обгона'), ('Непредоставление преимущества в движении маршрутному ТС, ТС с включенными специальным световыми и звуковыми сигналами', 'Непредоставление преимущества в движении маршрутному ТС, ТС с включенными специальным световыми и звуковыми сигналами'), ('Нарушение правил движения в жилых зонах', 'Нарушение правил движения в жилых зонах')], max_length=200, null=True, verbose_name='Нарушение(смысл)')),
                ('decree_violation_text', models.TextField(blank=True, null=True, verbose_name='Полное описание нарушения')),
                ('decree_total_speed', models.IntegerField(blank=True, null=True, verbose_name='Скорость движения в момент нарушения')),
                ('decree_photo', models.ImageField(default='decree_photo/default.jpg', upload_to='decree_photo/', verbose_name='Фото нарушения')),
                ('decree_KOAP', models.CharField(choices=[('Предупреждение', 'Предупреждение'), ('Административный штраф', 'Административный штраф'), ('Конфискация орудия совершения или предмета административного нарушения', 'Конфискация орудия совершения или предмета административного нарушения'), ('Лишение специального права, предоставленного лицу', 'Лишение специального права, предоставленного лицу'), ('Административный арест', 'Административный арест'), ('Дисквалификация', 'Дисквалификация'), ('Административное приостановление деятельности', 'Административное приостановление деятельности'), ('Обязательные работы', 'Обязательные работы'), ('Административный запрет на посещение мест проведения официальных спортивных соревнований в дни их проведения', 'Административный запрет на посещение мест проведения официальных спортивных соревнований в дни их проведения')], default='Административный штраф', max_length=110, verbose_name='Нарушенные пункты КОАП')),
                ('decree_PDD', models.CharField(max_length=50, verbose_name='Нарушенные пункты ПДД')),
                ('decree_camera', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Camera', verbose_name='Средство фиксации нарушения')),
                ('decree_car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Данные о нарушевшем автомобиле')),
            ],
        ),
        migrations.CreateModel(
            name='DiagnosticCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnostic_number', models.CharField(max_length=15, unique=True, verbose_name='Регистрационный номер')),
                ('diagnostic_date_from', models.DateField(verbose_name='Дата выдачи')),
                ('diagnostic_date_to', models.DateField(verbose_name='Срок действия до')),
                ('diagnostic_company', models.CharField(max_length=200, verbose_name='Пункт технического осмотра')),
                ('diagnostic_results', models.TextField(verbose_name='Результаты диагностирования')),
                ('diagnostic_car', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Автомобиль для диагностики')),
            ],
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport_number', models.CharField(max_length=11, verbose_name='Номер паспорта')),
                ('driver_surname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Фамилия водителя')),
                ('driver_name', models.CharField(max_length=50, verbose_name='Имя водителя')),
                ('driver_patronymic', models.CharField(max_length=50, verbose_name='Отчество водителя')),
                ('driver_birth', models.DateField(verbose_name='Дата рождения водителя')),
                ('driver_town', models.CharField(max_length=50, verbose_name='Город проживания водителя')),
            ],
        ),
        migrations.CreateModel(
            name='Europrotocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('europrotocol_date', models.DateField(verbose_name='Дата составления протокола')),
                ('europrotocol_scan_1', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Скан лицевой стороны европротокола')),
                ('europrotocol_scan_2', models.ImageField(blank=True, null=True, upload_to='', verbose_name=' Скан оборотной стороны европротокола')),
                ('europrotocol_car_1', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_car_1', to='gibdd_app.Car', verbose_name='Автомобиль 1')),
                ('europrotocol_car_2', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_car_2', to='gibdd_app.Car', verbose_name='Автомобиль 2')),
                ('europrotocol_driver_1', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_driver_1', to='gibdd_app.Driver', verbose_name='Водитель 1')),
                ('europrotocol_driver_2', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_driver_2', to='gibdd_app.Driver', verbose_name='Водитель 2')),
            ],
        ),
        migrations.CreateModel(
            name='Fine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fine_amount', models.IntegerField(verbose_name='Первоначальная сумма штрафа')),
                ('fine_discount', models.FloatField(verbose_name='Скидка')),
                ('date_of_payment_fine', models.DateField(blank=True, null=True, verbose_name='Дата оплаты штрафа')),
                ('fine_status', models.CharField(choices=[('Оплачен', 'Оплачен'), ('Не оплачен', 'Не оплачен'), ('Просрочен', 'Просрочен')], max_length=50, verbose_name='Статус штрафа')),
                ('fine_car_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Штраф для автомобиля')),
                ('fine_decree_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Decree', verbose_name='Данные о постановлении')),
            ],
        ),
        migrations.CreateModel(
            name='Inspector',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspector_number_token', models.CharField(max_length=9, unique=True, verbose_name='Номер жетона')),
                ('photo_inspector', models.ImageField(default='inspector_photo/default_photo_inspector.jpg', upload_to='inspector_photo/', verbose_name='Фото инспектора')),
                ('inspector_surname', models.CharField(max_length=50, verbose_name='Фамилия инспектора')),
                ('inspector_name', models.CharField(max_length=50, verbose_name='Имя инспектора')),
                ('inspector_patronymic', models.CharField(max_length=50, verbose_name='Отчество инспектора')),
                ('inspector_status', models.CharField(max_length=50, verbose_name='Звание инспектора')),
                ('inspector_division', models.CharField(max_length=40, verbose_name='Номер отделения')),
            ],
        ),
        migrations.CreateModel(
            name='Insurance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insurance_number', models.CharField(help_text='ЕЕЕ№1234567890', max_length=14, unique=True, verbose_name='Номер полиса')),
                ('insurance_company', models.CharField(max_length=100, verbose_name='Страховая компания')),
                ('insurance_type', models.CharField(choices=[('ОСАГО', 'ОСАГО'), ('КАСКО', 'КАСКО')], default='ОСАГО', max_length=10, verbose_name='Тип полиса')),
                ('insurance_date_from', models.DateField(verbose_name='Дата начала действия')),
                ('insurance_date_to', models.DateField(verbose_name='Дата окончания действия')),
                ('insurance_confines', models.CharField(choices=[('ОСАГО', 'ОСАГО'), ('ОСАГО без ограничений', 'ОСАГО без ограничений'), ('открытая страховка ОСАГО', 'открытая страховка ОСАГО')], default='ОСАГО', max_length=50, verbose_name='Ограничения')),
                ('insurance_comments', models.TextField(verbose_name='Комментарий к полису')),
                ('insurance_car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Полис на автомобиль')),
                ('insurance_diagnostic_card', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.DiagnosticCard', verbose_name='Диагностическая карта (ТО) о состоянии автомобиля')),
            ],
        ),
        migrations.CreateModel(
            name='InsuranceLicense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Insurance', verbose_name='Все страховки для данного автомобиля (ОСАГО, КАСКО)')),
            ],
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_status_license', models.CharField(choices=[('Действующие', 'Действующие'), ('Лишение', 'Лишение'), ('Просрочены', 'Просрочены')], default='Действующие', max_length=50, verbose_name='Статус прав')),
                ('photo_dr_license', models.ImageField(default='driving_license_photo/default_photo_dr_license.jpg', upload_to='driving_license_photo/', verbose_name='Фото ВУ')),
                ('series_dr_license', models.CharField(max_length=4, verbose_name='Серия ВУ')),
                ('number_dr_license', models.CharField(max_length=6, verbose_name='Номер ВУ')),
                ('date_issue_dr_license', models.DateField(default=datetime.datetime.now, editable=False, verbose_name='Дата выдачи ВУ')),
                ('date_end_dr_license', models.DateField(blank=True, default=datetime.date(2028, 4, 16), editable=False, null=True, verbose_name='Дата окончания действия ВУ')),
                ('division_give_dr_license', models.CharField(max_length=100, verbose_name='Подразделение ГИБДД, выдавшее ВУ')),
                ('town_dr_license', models.CharField(max_length=100, verbose_name='Город выдачи ВУ')),
                ('driver_data', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Driver', verbose_name='Данные о водителе')),
            ],
        ),
        migrations.CreateModel(
            name='LicenseDisqualification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disqualif_number', models.CharField(max_length=10, verbose_name='Номер постановления о лишении  прав')),
                ('disqualif_status', models.CharField(choices=[('Действующие', 'Действующие'), ('Лишение', 'Лишение'), ('Просрочены', 'Просрочены')], max_length=20, verbose_name='Статус прав')),
                ('disqualif_time', models.CharField(blank=True, choices=[('0 месяцев', '0 месяцев'), ('1 месяц', '1 месяц'), ('3 месяца', '3 месяца'), ('4 месяца', '4 месяца'), ('6 месяцев', '6 месяцев'), ('1 год', '1 год'), ('1,5 года', '1,5 года'), ('2 года', '2 года'), ('2,5 года', '2,5 года')], help_text='18 месяцев', max_length=10, null=True, verbose_name='Срок лишения прав')),
                ('disqualif_date_from', models.DateField(blank=True, null=True, verbose_name='Дата лишения прав')),
                ('disqualif_date_end', models.DateField(blank=True, null=True, verbose_name='Дата окончания лишение прав')),
                ('disqualif_cause', models.CharField(blank=True, max_length=200, null=True, verbose_name='Причина лишения')),
                ('disqualif_alcohol_amount', models.FloatField(blank=True, null=True, verbose_name='Промилле алкоголя в крови')),
                ('disqualif_comment', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
            ],
        ),
        migrations.CreateModel(
            name='Lisense_Accident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.AccidentReport', verbose_name='Список ДТП')),
                ('licen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.License', verbose_name='Все ВУ')),
            ],
        ),
        migrations.CreateModel(
            name='Lisense_Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categ', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Category', verbose_name='Все категории')),
                ('licen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.License', verbose_name='Все ВУ')),
            ],
        ),
        migrations.CreateModel(
            name='MedicalCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medical_number', models.CharField(max_length=10, verbose_name='Номер справки')),
                ('medical_date', models.DateField(verbose_name='Дата выдачи')),
                ('diagnosis', models.CharField(max_length=200, verbose_name='Диагноз')),
                ('organization_give', models.CharField(max_length=300, verbose_name='Выдавшая организация')),
                ('validity', models.CharField(blank=True, choices=[('6 месяцев', '6 месяцев'), ('1 год', '1 год'), ('2 года', '2 года'), ('другое', 'другое')], default='1 год', max_length=11, null=True, verbose_name='Срок действия справки')),
                ('med_photo_1', models.ImageField(blank=True, null=True, upload_to='med_photo/', verbose_name='Скан медицинской справки, лицевая сторона')),
                ('med_photo_2', models.ImageField(blank=True, null=True, upload_to='med_photo/', verbose_name='Скан медицинской справки, обратная сторона')),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_number', models.CharField(max_length=10, unique=True, verbose_name='Номер свидетельства собственника')),
                ('owner_surname', models.CharField(max_length=50, verbose_name='Фамилия собственника')),
                ('owner_name', models.CharField(max_length=50, verbose_name='Имя собственника')),
                ('owner_patronymic', models.CharField(max_length=50, verbose_name='Отчество собственника')),
                ('owner_town', models.CharField(max_length=50, verbose_name='Республика,край,область')),
                ('owner_district', models.CharField(blank=True, max_length=50, null=True, verbose_name='Район')),
                ('owner_address', models.CharField(max_length=100, verbose_name='Адрес собственника')),
                ('owner_comment', models.CharField(blank=True, max_length=400, null=True, verbose_name='Особые отметки')),
                ('owner_who_give', models.CharField(max_length=200, verbose_name='Выдано ГИБДД')),
                ('owner_date_give', models.DateField(verbose_name='Дата выдачи свидетельства собственника')),
            ],
        ),
        migrations.CreateModel(
            name='RegistrationCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registr_certificate_number', models.CharField(help_text='Например, 1234№123456', max_length=11, unique=True, verbose_name='Номер СТС')),
                ('registr_certificate_registr_sign', models.CharField(help_text='А111АА777', max_length=9, verbose_name='Регистрационный знак')),
                ('registr_certificate_VIN', models.CharField(help_text='Например,SAFDYUH12R1234567', max_length=17, unique=True, verbose_name='VIN')),
                ('registr_certificate_car_model', models.CharField(max_length=50, verbose_name='Марка, модель')),
                ('registr_certificate_type_car', models.CharField(choices=[('легковой', 'легковой'), ('грузовой', 'грузовой'), ('автобус', 'автобус'), ('мотоцикл', 'мотоцикл'), ('мопед', 'мопед'), ('прицеп', 'прицеп'), ('полуприцеп', 'полуприцеп'), ('универсал легковой', 'универсал легковой'), ('хэтчбек(комби) легковой', 'хэтчбек(комби) легковой'), ('легковой прочие', 'легковой прочие'), ('бортовой с тентом грузовой', 'бортовой с тентом грузовой'), ('грузовой фургон', 'грузовой фургон'), ('легковой минивэн', 'легковой минивэн'), ('грузовой бортовой', 'грузовой бортовой'), ('легковой седан', 'легковой седан'), ('легковой купе', 'легковой купе')], default='легковой', max_length=60, verbose_name='Тип ТС')),
                ('registr_certificate_category', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('прицеп', 'прицеп')], default='B', max_length=5, verbose_name='Категория ТС')),
                ('registr_certificate_year', models.IntegerField(help_text='Например,2018', verbose_name='Год выпуска ТС')),
                ('registr_certificate_chassis', models.CharField(max_length=30, verbose_name='Шасси №')),
                ('registr_certificate_body', models.CharField(help_text='Например,SAFDYUH12R1234567', max_length=17, verbose_name='Кузов №')),
                ('registr_certificate_colour', models.CharField(max_length=50, verbose_name='Цвет')),
                ('registr_certificate_power', models.CharField(help_text='Например,86(117)', max_length=12, verbose_name='Мощность двигателя,кВт/л.с')),
                ('registr_certificate_ecology_class', models.CharField(choices=[('первый', 'первый'), ('второй', 'второй'), ('третий', 'третий'), ('четвертый', 'четвертый'), ('пятый', 'пятый'), ('шестой', 'шестой'), ('седьмой', 'седьмой')], default='четвертый', max_length=20, verbose_name='Экологический класс')),
                ('registr_certificate_passport', models.CharField(help_text='Например, 12УУ№123456', max_length=11, verbose_name='Паспорт ТС серия')),
                ('registr_certificate_max_weight', models.IntegerField(verbose_name='Разрешенная max масса,kg')),
                ('registr_certificate_without_load', models.IntegerField(verbose_name='Масса без нагрузки,kg')),
            ],
        ),
        migrations.CreateModel(
            name='Stealing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stealing_status', models.CharField(blank=True, choices=[('Не числится в угоне', 'Не числится в угоне'), ('Числится в угоне', 'Числится в угоне')], max_length=25, null=True, verbose_name='Статус')),
                ('stealing_unique_number', models.CharField(blank=True, max_length=7, null=True, unique_for_date=True, verbose_name='Номер угона')),
                ('stealing_date', models.DateField(blank=True, null=True, verbose_name='Дата угона')),
                ('stealing_town', models.CharField(blank=True, max_length=50, null=True, verbose_name='Город угона')),
                ('stealing_comment', models.TextField(blank=True, null=True, verbose_name='Комментарий об угоне')),
            ],
        ),
        migrations.CreateModel(
            name='Witness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('witness_surname', models.CharField(max_length=50, verbose_name='Фамилия свидетеля')),
                ('witness_name', models.CharField(max_length=50, verbose_name='Имя свидетеля')),
                ('witness_patronymic', models.CharField(max_length=50, verbose_name='Отчество свидетеля')),
                ('witness_town', models.CharField(max_length=50, verbose_name='Город проживания свидетеля')),
                ('witness_address', models.CharField(max_length=50, verbose_name='Адрес свидетеля')),
                ('witness_phone', models.CharField(max_length=20, verbose_name='Телефон свидетеля')),
                ('witness_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='email свидетеля')),
                ('witness_comment', models.TextField(verbose_name='Показания свидетеля')),
                ('witness_accident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.AccidentReport', verbose_name='Свидетель аварии')),
            ],
        ),
        migrations.AddField(
            model_name='license',
            name='medical_certificate_data',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.MedicalCertificate', verbose_name='Данные о мед.справках'),
        ),
        migrations.AddField(
            model_name='license',
            name='status_dr_license',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.LicenseDisqualification', verbose_name='Подробности лишения прав'),
        ),
        migrations.AddField(
            model_name='insurancelicense',
            name='licen',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.License', verbose_name='ВУ, допущенные к управлению автомобилем по полису'),
        ),
        migrations.AddField(
            model_name='fine',
            name='fine_license_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.License', verbose_name='Данные о ВУ'),
        ),
        migrations.AddField(
            model_name='europrotocol',
            name='europrotocol_insurance_1',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_insurance_1', to='gibdd_app.Insurance', verbose_name='Страховой полис 1'),
        ),
        migrations.AddField(
            model_name='europrotocol',
            name='europrotocol_insurance_2',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_insurance_2s', to='gibdd_app.Insurance', verbose_name='Страховой полис 2'),
        ),
        migrations.AddField(
            model_name='europrotocol',
            name='europrotocol_license_1',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_license_1', to='gibdd_app.License', verbose_name='ВУ 1'),
        ),
        migrations.AddField(
            model_name='europrotocol',
            name='europrotocol_license_2',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='europrotocol_license_2', to='gibdd_app.License', verbose_name='ВУ 2'),
        ),
        migrations.AddField(
            model_name='decree',
            name='decree_inspector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Inspector', verbose_name='Инспектор, выписавший постановление'),
        ),
        migrations.AddField(
            model_name='decree',
            name='decree_license_data',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.License', verbose_name='Данные ВУ для вынесения постановления'),
        ),
        migrations.AddField(
            model_name='car',
            name='car_owner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Owner', verbose_name='Собственник автомобиля'),
        ),
        migrations.AddField(
            model_name='car',
            name='car_registr_certificate',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.RegistrationCertificate', verbose_name='Свидетельство о регистрации'),
        ),
        migrations.AddField(
            model_name='car',
            name='car_stealing',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Stealing', verbose_name='Детали угона'),
        ),
        migrations.AddField(
            model_name='autoschool_driver',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Driver', verbose_name='Ученик автошколы'),
        ),
        migrations.AddField(
            model_name='accidentreport',
            name='accident_causer_person',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Driver', verbose_name='Виновник аварии'),
        ),
        migrations.AddField(
            model_name='accidentreport',
            name='accident_europrotocol',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Europrotocol', verbose_name='ДТП по европротоколу'),
        ),
        migrations.AddField(
            model_name='accidentreport',
            name='accident_inspector',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Inspector', verbose_name='Инспектор, оформивший ДТП'),
        ),
        migrations.AddField(
            model_name='accident_car',
            name='accid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.AccidentReport', verbose_name='Все аварии с участием данного автомобиля'),
        ),
        migrations.AddField(
            model_name='accident_car',
            name='car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gibdd_app.Car', verbose_name='Автомобили, участвовавшие в ДТП'),
        ),
        migrations.AlterUniqueTogether(
            name='lisense_category',
            unique_together={('licen', 'categ')},
        ),
        migrations.AlterUniqueTogether(
            name='lisense_accident',
            unique_together={('licen', 'accid')},
        ),
        migrations.AlterUniqueTogether(
            name='insurancelicense',
            unique_together={('insur', 'licen')},
        ),
        migrations.AlterUniqueTogether(
            name='fine',
            unique_together={('fine_license_data', 'fine_decree_data')},
        ),
        migrations.AlterUniqueTogether(
            name='europrotocol',
            unique_together={('europrotocol_license_1', 'europrotocol_license_2'), ('europrotocol_car_1', 'europrotocol_car_2'), ('europrotocol_driver_1', 'europrotocol_driver_2'), ('europrotocol_insurance_1', 'europrotocol_insurance_2')},
        ),
        migrations.AlterUniqueTogether(
            name='autoschool_driver',
            unique_together={('student', 'school')},
        ),
        migrations.AlterUniqueTogether(
            name='accident_car',
            unique_together={('accid', 'car')},
        ),
    ]
